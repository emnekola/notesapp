{"version":3,"sources":["logo.svg","App.js","graphql/queries.js","graphql/subscriptions.js","graphql/mutations.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["CLIENT_ID","uuid","initialState","notes","loading","error","form","name","description","reducer","state","action","type","note","value","App","useReducer","dispatch","fetchNotes","a","API","graphql","query","notesData","data","listNotes","items","sort","b","console","useEffect","subscription","subscribe","next","onCreateNote","clientId","unsubscribe","styles","container","padding","input","marginBottom","item","textAlign","p","color","createNote","alert","completed","id","variables","log","onChange","e","target","deleteNote","noteToDelete","filter","x","updateNote","noteToUpdate","map","style","placeholder","onClick","dataSource","renderItem","Item","actions","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAAe,I,oEC+BTA,EAAYC,cAEZC,EAAe,CACnBC,MAAO,GACLC,SAAS,EACTC,OAAO,EACPC,KAAM,CACJC,KAAO,GACPC,YAAa,KAKXC,EAAU,SAACC,EAAOC,GACtB,OAAOA,EAAOC,MAEZ,IAAK,YACL,OAAO,2BACFF,GADL,IAEIP,MAAOQ,EAAOR,MACdC,SAAS,IAIX,IAAK,QACH,OAAO,2BACFM,GADL,IAEIL,OAAO,EACPD,SAAS,IAIf,IAAK,WACH,OAAO,2BACFM,GADL,IAEIP,MAAM,CACNQ,EAAOE,MADF,mBAEAH,EAAMP,UAKjB,IAAK,aACL,OAAO,2BACFO,GADL,IAEIJ,KAAMJ,EAAaI,OAIvB,IAAK,YACL,OAAO,2BACFI,GADL,IAEIJ,KAAK,2BACFI,EAAMJ,MADL,kBAEDK,EAAOJ,KAAOI,EAAOG,UAM5B,QACA,OAAO,eACFJ,KA+OEK,EAzOD,WAAO,IAAD,EAEUC,qBAAWP,EAASP,GAF9B,mBAETQ,EAFS,KAEFO,EAFE,KAIVC,EAAU,uCAAG,4BAAAC,EAAA,+EAESC,IAAIC,QAAQ,CAClCC,MC1FY,qWDuFC,OAETC,EAFS,OAMfN,EAAS,CACPL,KAAM,YACJT,MAAOoB,EAAUC,KAAKC,UAAUC,MAAMC,MAAK,SAACR,EAAGS,GAAJ,OAAUT,EAAEZ,MAAQqB,EAAErB,KAAO,GAAI,OARjE,gDAajBsB,QAAQxB,MAAR,MACAY,EAAS,CACPL,KAAM,UAfS,yDAAH,qDAoBlBkB,qBACE,WACEZ,IAEA,IAAMa,EAAeX,IAAIC,QACvB,CACEC,ME9He,kLFgIjBU,UACA,CACEC,KAAM,SAAAV,GACJ,IAAMV,EAAOU,EAAUT,MAAMU,KAAKU,aAC9BrB,EAAKsB,WAAanC,GAKtBiB,EAAS,CACPL,KAAM,WACJC,KAAMA,OAMhB,OAAO,kBAAMkB,EAAaK,iBAE1B,IAGJ,IAAMC,EAAS,CACbC,UAAW,CACTC,QAAS,IAETC,MAAO,CACPC,aAAc,IAEdC,KAAM,CACNC,UAAW,QAEXC,EAAG,CACHC,MAAO,YAILC,EAAU,uCAAG,8BAAA3B,EAAA,0DAGTb,EAASI,EAATJ,MAEEC,MAASD,EAAKE,YALP,yCAMRuC,MAAM,wCANE,cASblC,EATa,2BAUdP,GAVc,IAWf6B,SAAUnC,EACVgD,WAAW,EACXC,GAAIhD,gBAIRgB,EAAS,CACPL,KAAM,WACJC,SAGJI,EAAS,CACPL,KAAM,eAvBW,kBA2BXQ,IAAIC,QAAQ,CAChBC,MGjMiB,2RHkMf4B,UAAW,CAAEV,MAAO3B,KA7BP,OAgCnBgB,QAAQsB,IAAI,8BAhCO,kDAmCjBtB,QAAQsB,IAAI,UAAZ,MAnCiB,0DAAH,qDAuCZC,EAAW,SAACC,GAChBpC,EAAS,CACPL,KAAM,YACJL,KAAM8C,EAAEC,OAAO/C,KACfO,MAAOuC,EAAEC,OAAOxC,SAIhByC,EAAU,uCAAG,WAAOC,GAAP,SAAArC,EAAA,6DAEjBF,EAAS,CACPL,KAAM,YACJT,MAAOO,EAAMP,MAAMsD,QAAO,SAAAC,GAAC,OAAIA,GAAIF,OAJtB,kBASTpC,IAAIC,QAAQ,CAChBC,MG9LiB,2RH+Lf4B,UAAW,CACXV,MAAO,CACLS,GAAIO,EAAaP,OAbR,sDAoBfpB,QAAQxB,MAAR,MApBe,wDAAH,sDAwBVsD,EAAU,uCAAG,WAAOC,GAAP,SAAAzC,EAAA,6DAGjBF,EAAS,CACPL,KAAM,YACJT,MAAOO,EAAMP,MAAM0D,KAAI,SAAAH,GAAC,kCACrBA,GADqB,IAEtBV,UAAWU,GAAKE,GAAgBF,EAAEV,UAAYU,EAAEV,iBAPrC,kBAaT5B,IAAIC,QAAQ,CAChBC,MG1OiB,2RH2Of4B,UAAW,CACXV,MAAO,CACLS,GAAIW,EAAaX,GACfD,WAAYY,EAAaZ,cAlBlB,sDAyBfnB,QAAQxB,MAAR,MAzBe,wDAAH,sDAwDd,OACE,sBACEyD,MAAOzB,EAAOC,UADhB,UAIA,cAAC,IAAD,CACEc,SAAUA,EACVtC,MAAOJ,EAAMJ,KAAKC,KAClBwD,YAAY,YACZxD,KAAK,OACLuD,MAAOzB,EAAOG,QAGhB,cAAC,IAAD,CACEY,SAAUA,EACVtC,MAAOJ,EAAMJ,KAAKE,YAClBuD,YAAY,mBACZxD,KAAK,cACLuD,MAAOzB,EAAOG,QAGhB,cAAC,IAAD,CACEwB,QAASlB,EACTlC,KAAK,UAFP,yBAOE,cAAC,IAAD,CACER,QAASM,EAAMN,QACf6D,WAAYvD,EAAMP,MAClB+D,WAzDa,SAACxB,GAClB,OACE,cAAC,IAAKyB,KAAN,CACEL,MAAOzB,EAAOK,KACd0B,QAAS,CACP,mBACEN,MAAOzB,EAAOO,EACdoB,QAAS,kBAAMT,EAAWb,IAF5B,oBAME,mBACAsB,QAAS,kBAAML,EAAWjB,IAD1B,SAGEA,EAAKM,UAAY,kBAAoB,mBAZ7C,SAgBA,cAAC,IAAKmB,KAAKE,KAAX,CACEC,MAAO5B,EAAKnC,MAAQmC,EAAKM,UAAY,cAAgB,IACrDxC,YAAakC,EAAKlC,uBIrRX+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKCQ,EATG,CACd,mBAAsB,YACtB,4BAA+B,iFAC/B,mBAAsB,YACtB,+BAAkC,UAClC,mBAAsB,kC,OCC1BC,QAAQC,UAAUC,GAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.f47c1c34.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport\n  React\n  , {\n    useEffect\n  , useReducer\n} from 'react';\n\nimport { API } from 'aws-amplify';\n\nimport { List\n  , Input\n  , Button\n  } from 'antd';\n\nimport 'antd/dist/antd.css';\n\nimport { listNotes } from './graphql/queries';\n\nimport { v4 as uuid } from 'uuid';\n\nimport {\n  createNote as CreateNote\n  , deleteNote as DeleteNote\n  , updateNote as UpdateNote\n  } from './graphql/mutations';\n\n  import { onCreateNote } from './graphql/subscriptions';\n\nconst CLIENT_ID = uuid();\n\nconst initialState = {\n  notes: []\n  , loading: true\n  , error: false\n  , form: {\n      name : \"\"\n    , description: \"\"\n  }\n};\n\n\n  const reducer = (state, action) => {\n    switch(action.type) {\n\n      case 'SET_NOTES':\n      return {\n        ...state\n        , notes: action.notes\n        , loading: false\n      };\n        break;\n\n        case 'ERROR':\n          return {\n            ...state\n            , error: true\n            , loading: true\n          }\n        break;\n\n        case 'ADD_NOTE':\n          return {\n            ...state\n            , notes: [\n              action.note\n              , ...state.notes\n            ]\n          };\n          break;\n\n        case 'RESET_FORM':\n        return {\n          ...state\n          , form: initialState.form\n        };\n          break;\n\n        case 'SET_INPUT':\n        return {\n          ...state\n          , form: {\n            ...state.form\n            , [action.name]: action.value\n          }\n        };\n          break;\n\n\n        default:\n        return {\n          ...state\n         };\n        break;\n    }\n  };\n\n  const App = () => {\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const fetchNotes = async () => {\n      try {\n        const notesData = await API.graphql({\n          query: listNotes\n        });\n\n        dispatch({\n          type: \"SET_NOTES\"\n          , notes: notesData.data.listNotes.items.sort((a, b) => a.name >= b.name ? 1: -1)\n        });\n      }\n\n    catch (err) {\n      console.error(err);\n      dispatch({\n        type: \"ERROR\"\n      });\n    }\n  };\n\n  useEffect (\n    () => {\n      fetchNotes();\n\n      const subscription = API.graphql(\n        {\n          query: onCreateNote\n        }\n      ).subscribe(\n        {\n          next: notesData => {\n            const note = notesData.value.data.onCreateNote;\n            if (note.clientId === CLIENT_ID) {\n              return;\n            }\n\n            // Otherwise, update the state with new note.\n            dispatch({\n              type: 'ADD_NOTE'\n              , note: note\n            });\n          }\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    }\n    , []\n  );\n\n  const styles = {\n    container: {\n      padding: 20\n    }\n    , input: {\n      marginBottom: 10\n    }\n    , item: {\n      textAlign: 'left'\n    }\n    , p: {\n      color: '#1890ff'\n    }\n  };\n\n  const createNote = async () => {\n\n    //Destructuring\n    const { form } = state;\n\n    if (!form.name || !form.description) {\n      return alert('please enter a name and description');\n    }\n\n  const note = {\n    ...form\n    , clientId: CLIENT_ID\n    , completed: false\n    , id: uuid()\n  };\n\n\n  dispatch({\n    type: 'ADD_NOTE'\n    , note\n  });\n\n  dispatch({\n    type: 'RESET_FORM'\n  });\n\n  try {\n    await API.graphql({\n      query: CreateNote\n      , variables: { input: note }\n  });\n\n  console.log('successfully created note!')\n\n  } catch (err) {\n    console.log(\"error: \", err)\n  }\n};\n\nconst onChange = (e) => {\n  dispatch({\n    type: 'SET_INPUT'\n    , name: e.target.name\n    , value: e.target.value\n  });\n}\n\nconst deleteNote = async (noteToDelete) => {\n  // Optimistically update state with the note removed.\n  dispatch({\n    type: \"SET_NOTES\"\n    , notes: state.notes.filter(x => x!= noteToDelete)\n  });\n\n  // Call the backend to delete the note.\n  try {\n    await API.graphql({\n      query: DeleteNote\n      , variables: {\n        input: {\n          id: noteToDelete.id\n        }\n      }\n    });\n  }\n\n  catch (err) {\n    console.error(err);\n  }\n};\n\nconst updateNote = async (noteToUpdate) => {\n\n  // Update state first.\n  dispatch({\n    type: \"SET_NOTES\"\n    , notes: state.notes.map(x => ({\n      ...x\n      , completed: x == noteToUpdate ? !x.completed : x.completed\n    }))\n  });\n\n  // Then call the backend.\n  try {\n    await API.graphql({\n      query: UpdateNote\n      , variables: {\n        input: {\n          id: noteToUpdate.id\n          , completed: !noteToUpdate.completed\n        }\n      }\n    });\n  }\n\n  catch (err) {\n    console.error(err);\n  }\n};\n\n\n  const renderItem = (item) => {\n    return (\n      <List.Item\n        style={styles.item}\n        actions={[\n          <p\n            style={styles.p}\n            onClick={() => deleteNote(item)}\n          >\n            Delete\n          </p>\n          , <p\n            onClick={() => updateNote(item)}\n          >\n            { item.completed ? 'Mark Incomplete' : 'Mark Complete'}\n          </p>\n        ]}\n      >\n      <List.Item.Meta\n        title={item.name + (item.completed ? '(completed)' : '')}\n        description={item.description}\n      />\n      </List.Item>\n    );\n  };\n\n  return (\n    <div\n      style={styles.container}\n    >\n\n    <Input\n      onChange={onChange}\n      value={state.form.name}\n      placeholder=\"Note Name\"\n      name='name'\n      style={styles.input}\n    />\n\n    <Input\n      onChange={onChange}\n      value={state.form.description}\n      placeholder=\"Note description\"\n      name='description'\n      style={styles.input}\n    />\n\n    <Button\n      onClick={createNote}\n      type=\"primary\"\n    >\n      Create Note\n    </Button>\n\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://7xfrjlntgng3rhp5tvixs4xeay.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-p4b5hhtiandafargfomf4sxonu\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}